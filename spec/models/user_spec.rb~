require 'spec_helper'

describe User do
  before(:each) do
    @attr = {
      :name => "sample_user_name",
      :email => "sample_user@mailserver.com",
      :password => "somepassword",
      :password_confirmation => "somepassword",
    }
  end

  it "should create a new instance given valid attributes" do
    User.create!(@attr)
  end
  
  it "should require a name" do
    no_name_user=User.new(@attr.merge(:name => ""))
    no_name_user.should_not be_valid
  end
  
  it "should require a email" do
    no_email_user=User.new(@attr.merge(:email => ""))
    no_email_user.should_not be_valid
  end
  
  it "should reject names that are too long" do
    long_name="a" * 21
    long_name_user=User.new(@attr.merge(:name => long_name))
    long_name_user.should_not be_valid
  end
  
  it "should accept vaild emails" do
    vaild_addresses=%w[user@foo.com THE_USER@foo.bar.org first.last@gmail.co.uk]
    vaild_addresses.each do |address|
      valid_user=User.new(@attr.merge(:email =>address))
      valid_user.should be_valid
    end
  end
  
  it "should reject invaild email addresses" do
    invalid_email_address=%w[user@foo,com user_at_foo.org example.user@foo.]
    invalid_email_address.each do |address|
      invalid_user=User.new(@attr.merge(:email => address))
      invalid_user.should_not be_valid
    end
  end
  
  it "should reject douplicate emails identical up to case" do
    
    first_valid_user=User.create!(@attr.merge(:email => @attr[:email].upcase))
    second_invalid_user=User.new(@attr)
    second_invalid_user.should_not be_valid
  end
  
  describe "password validations" do
    it "should require a password" do
      User.new(@attr.merge(:password => "" , :password_confirmation => "")).should_not be_valid
    end
    
    it "should require maching password confirmation" do
      User.new(@attr.merge(:password_confirmation => "non-maching_password")).
      should_not be_valid
    end
    
    it "should reject too short passwords" do
      too_short_pass="12345"
      hash=@attr.merge(:password => too_short_pass, :password_confirmation => too_short_pass)
      User.new(hash).should_not be_valid
    end
    
    it "should reject too long passwords" do
      too_long_pass='a' * 41
      hash=@attr.merge(:password => too_long_pass, :password_confirmation => too_long_pass)
      User.new(hash).should_not be_valid
    end
  end
  
  describe "password encryption" do
    before (:each) do
      new_user={
      :name => "user_name-1",
      :email => "user-1@mailserver.com",
      :password => "user_1_pass",
      :password_confirmation => "user_1_pass",
    }
      @user=User.create!(new_user)  
    end      
    
    it "should be true if the passwords matche" do
      @user.has_password?("user_1_pass").should be_true
    end
    
    it "should be false if the passwords don't match" do
      @user.has_password?("some_invalid_password").should be_false
    end
    
    describe "has_password? method" do
    it "should have an encrypted password attribute" do
      @user.should respond_to(:encrypted_password)
    end
    it "should set an encrypted password" do
      @user.encrypted_password.should_not be_blank
    end
  end

  
    
  end
  
end
